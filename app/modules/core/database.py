from sqlalchemy import create_engine
from sqlalchemy.orm import declarative_base  # âœ… Corrigido: import oficial para SQLAlchemy â‰¥2.0
from sqlalchemy.orm import sessionmaker

# ==========================================
# ðŸ”§ CONFIGURAÃ‡ÃƒO DE CONEXÃƒO COM O BANCO DE DADOS
# ==========================================

# ðŸ”‘ String de conexÃ£o (substitua se necessÃ¡rio)
SQLALCHEMY_DATABASE_URL = "mysql+pymysql://root:@localhost:3306/cinepetro"

# ðŸ”Œ Cria o engine, que gerencia a conexÃ£o com o banco
engine = create_engine(
    SQLALCHEMY_DATABASE_URL,
    pool_pre_ping=True  # âœ… MantÃ©m a conexÃ£o viva automaticamente (Ãºtil em MySQL/MariaDB)
)

# ðŸ’¼ Cria a fÃ¡brica de sessÃµes (SessionLocal serÃ¡ usado para gerar sessÃµes de banco nas rotas)
SessionLocal = sessionmaker(
    autocommit=False,  # âœ… O commit deve ser manual (mais seguro)
    autoflush=False,   # âœ… O flush automÃ¡tico Ã© desativado para evitar gravaÃ§Ãµes acidentais
    bind=engine        # ðŸ”— Conecta Ã  engine configurada acima
)

# ðŸ“¦ Base declarativa para modelos ORM
# Todos os modelos do SQLAlchemy devem herdar dela
Base = declarative_base()

# ==========================================
# ðŸ“¦ GERENCIADOR DE SESSÃƒO (DEPENDÃŠNCIA PARA FASTAPI/FLASK)
# ==========================================
def get_db():
    """
    Fornece uma sessÃ£o de banco de dados para cada request.
    Ele abre a sessÃ£o, entrega via yield e garante o fechamento no final.
    Ideal para usar como dependÃªncia em FastAPI, Flask, etc.
    """
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
